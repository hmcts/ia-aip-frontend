#!groovy

properties([
    [
        $class       : 'GithubProjectProperty',
        displayName  : 'AIP Frontend',
        projectUrlStr: 'https://github.com/hmcts/ia-aip-frontend/'
    ],
    pipelineTriggers([
    cron('15 5 * * *')
    ])
])

@Library("Infrastructure")

def type      = "nodejs"
def product   = "ia"
def component = "aip-frontend"
def channel   = "#aip-tech"

def secrets = [
    'ia-${env}': [
        secret('s2s-secret', 'S2S_SECRET'),
        secret('idam-secret', 'IDAM_SECRET'),
        secret('saucelabs', 'SAUCELABS_SECRET'),
        secret('dm-url', 'DOC_MANAGEMENT_URL'),
        secret('addressLookupToken', 'ADDRESS_LOOKUP_TOKEN'),
        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-homeoffice-generic-username', 'TEST_HOMEOFFICE_GENERIC_USERNAME'),
        secret('test-homeoffice-generic-password', 'TEST_HOMEOFFICE_GENERIC_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component) {
    enableSlackNotifications(channel)
    
    loadVaultSecrets(secrets)

    env.TEST_URL = 'https://immigration-appeal.aat.platform.hmcts.net'
    env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.CCD_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
    env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
    env.S2S_MICROSERVICE_NAME = 'iac'

    enableCrossBrowserTest()
    enableSecurityScan()
    enableMutationTest()
    enableFullFunctionalTest(120)

    after('crossBrowserTest') {
        yarnBuilder.yarn('test:a11y')
    }

    after('mutationTest') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/mutation/node/",
            reportFiles          : 'index.html',
            reportName           : 'AIP Frontend Mutation tests'
        ])
    }

    after('fullFunctionalTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "reports/tests/functional/",
                reportFiles          : 'index.html',
                reportName           : 'AIP Frontend Functional Test'
        ])
    }
}
