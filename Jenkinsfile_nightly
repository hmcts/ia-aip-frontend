#!groovy

properties([
    [
        $class       : 'GithubProjectProperty',
        displayName  : 'AIP Frontend',
        projectUrlStr: 'https://github.com/hmcts/ia-aip-frontend/'
    ],
    pipelineTriggers([
    cron('H 14 * * 2-5')
    ]),
    parameters([
        string(name: 'sleepTimer', defaultValue: "0", description: 'Wait x seconds until the pipeline is run'),
        booleanParam(name: 'skipFortifyScan', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipCrossBrowserTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipSecurityScan', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipFullFunctionalTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        string(name: 'ZAP_URL_EXCLUSIONS', defaultValue: "-config globalexcludeurl.url_list.url\\(1\\).regex=\\'.*/assets/images.*\\' -config globalexcludeurl.url_list.url\\(2\\).regex=\\'.*/assets/stylesheets.*\\' -config globalexcludeurl.url_list.url\\(3\\).regex=\\'.*/assets/javascripts.*\\' -config globalexcludeurl.url_list.url\\(4\\).regex=\\'.ruxitagentjs.\\' -config globalexcludeurl.url_list.url\\(5\\).regex=\\'.*/terms-and-conditions.*\\' -config globalexcludeurl.url_list.url\\(6\\).regex=\\'.*/privacy-policy.*\\' -config globalexcludeurl.url_list.url\\(7\\).regex=\\'.*/contact-us.*\\' -config globalexcludeurl.url_list.url\\(8\\).regex=\\'.*/login.*\\' -config globalexcludeurl.url_list.url\\(9\\).regex=\\'.*/cookies.*\\' -config globalexcludeurl.url_list.url\\(10\\).regex=\\'.*/cookie-preferences.*\\' -config globalexcludeurl.url_list.url\\(11\\).regex=\\'.*/robots.txt\\' -config globalexcludeurl.url_list.url\\(12\\).regex=\\'.*/sitemap.*\\' -config globalexcludeurl.url_list.url\\(13\\).regex=\\'.*jquery-3.4.1.min.js\\'")
    ])
])

@Library("Infrastructure")

def type      = "nodejs"
def product   = "ia"
def component = "aip-frontend"
def channel   = "#aip-tech"

def secrets = [
    'ia-${env}': [
        secret('s2s-secret', 'S2S_SECRET'),
        secret('idam-secret', 'IDAM_SECRET'),
        secret('saucelabs', 'SAUCELABS_SECRET'),
        secret('launch-darkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
        secret('dm-url', 'DOC_MANAGEMENT_URL'),
        secret('addressLookupToken', 'ADDRESS_LOOKUP_TOKEN'),
        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-share-case-a-username', 'TEST_LAW_FIRM_SHARE_CASE_A_USERNAME'),
        secret('test-law-firm-share-case-a-password', 'TEST_LAW_FIRM_SHARE_CASE_A_PASSWORD'),
        secret('test-homeoffice-generic-username', 'TEST_HOMEOFFICE_GENERIC_USERNAME'),
        secret('test-homeoffice-generic-password', 'TEST_HOMEOFFICE_GENERIC_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),
        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),
        secret('pcq-token-key', 'PCQ_TOKEN_KEY'),
        secret('system-username', 'IA_SYSTEM_USERNAME'),
        secret('system-password', 'IA_SYSTEM_PASSWORD'),
        secret('case-documents-api-url', 'CASE_DOCUMENT_AM_URL'),
        secret('ia-gov-notify-key', 'GOV_NOTIFY_KEY')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def urlExclusions = params.ZAP_URL_EXCLUSIONS
withNightlyPipeline(type, product, component) {
    script {
        sleep(params.sleepTimer)
    }
    loadVaultSecrets(secrets)

    env.TEST_URL = 'https://immigration-appeal.aat.platform.hmcts.net'
    env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.CCD_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
    env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
    env.S2S_MICROSERVICE_NAME = 'iac'
    env.TEST_E2E_FAIL_FAST = 'false'

    if (!params.skipFortifyScan) {
        enableFortifyScan()
    }
    if (!params.skipCrossBrowserTests) {
        enableCrossBrowserTest()
    }
    if (!params.skipSecurityScan) {
        enableSecurityScan(urlExclusions: urlExclusions, scanType: "frontend")
    }
    if (!params.skipFullFunctionalTests) {
        enableFullFunctionalTest(180)
    }

//    mutation tests not yet implemented
//    enableMutationTest()

    before('fortify-scan') {
        sh "chmod +x ./test/java/gradlew"
    }

    afterAlways('fortify-scan') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "Fortify Scan",
                reportFiles          : "FortifyScanReport.html",
                reportName           : "Fortify Scan Report"
        ]
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('crossBrowserTest') {
        publishHTML([
                reportName           : 'IA AIP Frontend Cross Browser Tests',
                reportDir            : "functional-output/crossbrowser/reports/",
                reportFiles          : "${dir('functional-output/crossbrowser/reports') { findFiles(glob: '**/records.html').join(',') ?: 'Not found' }}",
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true
        ])
    }

    afterAlways('mutationTest') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/mutation/node/",
            reportFiles          : 'index.html',
            reportName           : 'AIP Frontend Mutation tests'
        ])
    }

    afterAlways('fullFunctionalTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "functional-output/e2e/reports/",
                reportFiles          : 'report.html',
                reportName           : 'AIP Frontend Functional Test'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/accessibility/*'
    }
}
